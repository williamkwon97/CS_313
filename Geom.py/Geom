#  File: Geom.py

#  Description: Basic Geomtry

#  Student Name: Ebrahim Haji

#  Student UT EID: eah3345

#  Partner Name: null

#  Partner UT EID: null

#  Course Name: CS 313E

#  Unique Number: 51355

#  Date Created: 02/01/2018

#  Date Last Modified: 02/01/2018


import math


class Point(object):
    # constructor
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    # get distance
    def dist(self, other):
        return math.hypot(self.x - other.x, self.y - other.y)

    # get a string representation of a Point object
    def __str__(self):
        return '(' + str(self.x) + " , " + str(self.y) + ")"

    # test for equality
    def __eq__(self, other):
        tol = 1.0e-16
        return ((abs(self.x - other.x) < tol) and (abs(self.y - other.y) < tol))


class Circle(object):
    # constructor
    def __init__(self, radius=1, x=0, y=0):
        self.radius = radius
        self.center = Point(x, y)

    # compute cirumference
    def circumference(self):
        return 2.0 * math.pi * self.radius

    # compute area
    def area(self):
        return math.pi * self.radius * self.radius

    # determine if point is strictly inside circle
    def point_inside(self, p):
        return (self.center.dist(p) < self.radius)

    # determine if a circle is strictly inside this circle
    def circle_inside(self, c):
        distance = self.center.dist(c.center)
        return (distance + c.radius) < self.radius

    # determine if a circle c intersects this circle (non-zero area of overlap)
    def does_intersect(self, c):
        distance = self.center.dist(c.center)
        return (distance < (self.radius + c.radius))

    # determine the smallest circle that circumscribes a rectangle
    # the circle goes through all the vertices of the rectangle
    def circle_circumscribes(self, r):
        x = (r.ul.x + r.lr.x) / 2
        y = (r.ul.y + r.lr.y) / 2
        center = Point(x, y)
        radius = center.dist(r.ul)
        radius = round(radius, 2)
        new_circle = Circle(radius, x, y)
        return new_circle

    # string representation of a circle
    def __str__(self):
        return '(' + str(self.center.x) + ' , ' + str(self.center.y) + ') : ' + str(self.radius)

    # test for equality of radius
    def __eq__(self, other):
        tol = 1.0e-16
        return ((abs(self.radius - other.radius) < tol))


class Rectangle(object):
    # constructor
    def __init__(self, ul_x=0, ul_y=1, lr_x=1, lr_y=0):
        if ((ul_x < lr_x) and (ul_y > lr_y)):
            self.ul = Point(ul_x, ul_y)
            self.lr = Point(lr_x, lr_y)
        else:
            self.ul = Point(0, 1)
            self.lr = Point(1, 0)

    # determine length of Rectangle (distance along the x axis)
    def length(self):
        length = self.lr.x - self.ul.x
        return length

    # determine width of Rectangle (distance along the y axis)
    def width(self):
        width = self.ul.y - self.lr.y
        return width

    # determine the perimeter
    def perimeter(self):
        perimeter = (abs(self.lr.x - self.ul.x) + abs(self.ul.y - self.lr.y)) * 2
        return perimeter

    # determine the area
    def area(self):
        area = abs(self.lr.x - self.ul.x) * abs(self.ul.y - self.lr.y)
        return area

    # determine if a point is strictly inside the Rectangle
    def point_inside(self, p):
        return (self.ul.x < p.x and self.lr.x > p.x) and (self.ul.y > p.y and self.lr.y < p.y)

    # determine if another Rectangle is strictly inside this Rectangle
    def rectangle_inside(self, r):
        return ((self.ul.x < r.ul.x) and (self.ul.y > r.ul.y)) and ((self.lr.x > r.lr.x) and (self.lr.y < r.lr.y))

    # determine if two Rectangles overlap (non-zero area of overlap)
    def does_intersect(self, other):
        if other.ul.x > self.lr.x:
            return False
        elif other.lr.y > self.ul.y:
            return False
        elif other.ul.y < self.lr.y:
            return False
        elif other.lr.x < self.ul.x:
            return False
        else:
            return True
            # determine the smallest rectangle that circumscribes a circle

    # sides of the rectangle are tangents to circle c
    def rect_circumscribe(self, c):
        ul_x = c.center.x - c.radius
        ul_y = c.center.y + c.radius
        lr_x = c.center.x + c.radius
        lr_y = c.center.y - c.radius
        new_rect = Rectangle(ul_x, ul_y, lr_x, lr_y)
        return new_rect

    # give string representation of a rectangle
    def __str__(self):
        return '(' + str(self.ul.x) + ' , ' + str(self.ul.y) + ')' + ' : (' + str(self.lr.x) + ' , ' + str(
            self.lr.y) + ')'
        # determine if two rectangles have the same length and width

    def __eq__(self, other):
        tol = 1.0e-16
        return (abs((self.lr.x - self.ul.x) - (other.lr.x - other.ul.x)) < tol) and (
                    abs((self.ul.y - self.lr.y) - (other.ul.y - other.lr.y)) < tol)


def main():
    # open the file geom.txt
    in_file = open('./geom.txt', 'r')
    geom_list = []
    for line in in_file:
        line = line.strip()
        line = line.split()
        new_list = []
        for i in line:
            if (i.find('.') != -1):
                new_list.append(float(i))
        geom_list.append(new_list)

    # create Point objects P and Q
    P = Point(geom_list[0][0], geom_list[0][1])
    Q = Point(geom_list[1][0], geom_list[1][1])
    # print the coordinates of the points P and Q
    print("Coordinates of P: ", P)
    print("Coordinates of Q: ", Q)
    # find the distance between the points P and Q
    print("Distance between P and Q: ", round(P.dist(Q), 2))
    # create two Circle objects C and D
    C = Circle(geom_list[2][2], geom_list[2][0], geom_list[2][1])
    D = Circle(geom_list[3][2], geom_list[3][0], geom_list[3][1])
    # print C and D
    print("Circle C: ", C)
    print("Circle D: ", D)
    # compute the circumference of C
    print("Circumference of C: ", round(C.circumference(), 2))
    # compute the area of D
    print("Area of D:", round(D.area(), 2))
    # determine if P is strictly inside C
    if (C.point_inside(P)):
        print("P is inside C")
    else:
        print("P is not inside C")
    # determine if C is strictly inside D
    if (D.circle_inside(C)):
        print("C is inside D")
    else:
        print("C is not inside D")
    # determine if C and D intersect (non zero area of intersection)
    if (C.does_intersect(D)):
        print("C does intersect D")
    else:
        print("C does not intersect D")
    # determine if C and D are equal (have the same radius)
    if (C == D):
        print("C is equal to D")
    else:
        print("C is not equal to D")
    # create two rectangle objects G and H
    G = Rectangle(geom_list[4][0], geom_list[4][1], geom_list[4][2], geom_list[4][3])
    H = Rectangle(geom_list[5][0], geom_list[5][1], geom_list[5][2], geom_list[5][3])
    # print the two rectangles G and H
    print("Rectangle G: ", G)
    print("Rectangle H: ", H)
    # determine the length of G (distance along x axis)
    print("Length of G: ", G.length())
    # determine the width of H (distance along y axis)
    print("Width of H: ", H.width())
    # determine the perimeter of G
    print("Perimeter of G: ", G.perimeter())
    # determine the area of H
    print("Area of H: ", H.area())
    # determine if point P is strictly inside rectangle G
    if G.point_inside(P):
        print("P is inside G")
    else:
        print("P is not inside G")
    # determine if rectangle G is strictly inside rectangle H
    if H.rectangle_inside(G):
        print("G is inside H")
    else:
        print("G is not inside H")
    # determine if rectangles G and H overlap (non-zero area of overlap)
    if G.does_intersect(H):
        print("G does overlap H")
    else:
        print("G does not overlap H")
    # find the smallest circle that circumscribes rectangle G
    # goes through the four vertices of the rectangle
    print("Circle that circumscribes G: ", C.circle_circumscribes(G))
    # find the smallest rectangle that circumscribes circle D
    # all four sides of the rectangle are tangents to the circle
    print("Rectangle that circumscribes D: ", G.rect_circumscribe(D))
    # determine if the two rectangles have the same length and width
    if (G == H):
        print("Rectangle G is equal to H")
    else:
        print("Rectangle G is not equal to H")
    # close the file geom.txt
    in_file.close()


main()